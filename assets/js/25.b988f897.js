(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{383:function(t,r,o){"use strict";o.r(r);var n=o(43),s=Object(n.a)({},(function(){var t=this,r=t.$createElement,o=t._self._c||r;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"深入理解js原型链"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#深入理解js原型链"}},[t._v("#")]),t._v(" 深入理解js原型链")]),t._v(" "),o("h2",{attrs:{id:"用自己的方式理解constructor、prototype、-proto-和原型链"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#用自己的方式理解constructor、prototype、-proto-和原型链"}},[t._v("#")]),t._v(" 用自己的方式理解constructor、prototype、__proto__和原型链")]),t._v(" "),o("p",[t._v("为了更轻松、更有动力地理解透，我采用从constructor到__proto__原型链一步步“拆解”的方式去理解，希望有好的效果。文章内容如下：")]),t._v(" "),o("p",[t._v("1.先理解为什么“函数即对象”"),o("br"),t._v("\n2.constructor其实很纯粹"),o("br"),t._v("\n3.prototype是为何而出现"),o("br"),t._v("\n4.真正的constructor属性藏在哪"),o("br"),t._v("\n5.__proto__让实例能找到自己的原型对象"),o("br"),t._v("\n6.究竟何为原型链"),o("br"),t._v("\n7.原型链引出新的继承方式"),o("br"),t._v("\n8.学了要用系列 | 手写一个new"),o("br"),t._v("\n9.总结")])])}),[],!1,null,null,null);r.default=s.exports}}]);